name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: replay_test
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json
            package-lock.json
          
      - name: Install client dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Install server dependencies
        working-directory: ./server
        run: npm ci
        
      - name: Install root dependencies (E2E)
        run: npm ci
        
      - name: Setup test environment
        run: |
          echo "Setting up test database and environment..."
          # Copy environment template for tests
          cp server/.env.example server/.env.test || true
        
      - name: Lint client code
        working-directory: ./client
        run: npm run lint
        
      - name: Type check client
        working-directory: ./client
        run: npx tsc --noEmit
        
      - name: Run client unit tests
        working-directory: ./client
        run: npm run test:ci
        env:
          NODE_ENV: test
          
      - name: Run server unit tests
        working-directory: ./server
        run: npm run test:ci
        env:
          NODE_ENV: test
          POSTGRES_URL: postgres://postgres:postgres@localhost:5432/replay_test
          REDIS_URL: redis://localhost:6379
          # Test API keys (non-functional)
          GEMINI_API_KEY: test-gemini-key
          OPENAI_API_KEY: test-openai-key
          REPLICATE_API_TOKEN: test-replicate-token
          # Test Supabase config
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_SERVICE_ROLE_KEY: test-service-key
          SUPABASE_ANON_KEY: test-anon-key
          
      - name: Build client for production
        working-directory: ./client
        run: npm run build
        env:
          VITE_API_URL: http://localhost:3001
          VITE_SUPABASE_URL: https://test.supabase.co
          VITE_SUPABASE_ANON_KEY: test-anon-key
          
      - name: Start server for E2E tests
        working-directory: ./server
        run: |
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3001
          POSTGRES_URL: postgres://postgres:postgres@localhost:5432/replay_test
          REDIS_URL: redis://localhost:6379
          GEMINI_API_KEY: test-gemini-key
          OPENAI_API_KEY: test-openai-key
          REPLICATE_API_TOKEN: test-replicate-token
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_SERVICE_ROLE_KEY: test-service-key
          
      - name: Start client dev server for E2E tests
        working-directory: ./client
        run: |
          npm run dev &
          sleep 10
        env:
          VITE_API_URL: http://localhost:3001
          VITE_SUPABASE_URL: https://test.supabase.co
          VITE_SUPABASE_ANON_KEY: test-anon-key
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          E2E_BASE_URL: http://localhost:5173
          
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            client/coverage/
            server/coverage/
            test-results/
            playwright-report/
          retention-days: 7
          
      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unittests
          name: replay-coverage
          fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: replay_integration_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
          
      - name: Install server dependencies
        working-directory: ./server
        run: npm ci
        
      - name: Run database migrations
        working-directory: ./server
        run: npm run migrate || echo "No migrations to run"
        env:
          NODE_ENV: test
          POSTGRES_URL: postgres://postgres:postgres@localhost:5432/replay_integration_test
          
      - name: Run integration tests
        working-directory: ./server
        run: npm run test:integration
        env:
          NODE_ENV: test
          POSTGRES_URL: postgres://postgres:postgres@localhost:5432/replay_integration_test
          GEMINI_API_KEY: test-gemini-key
          OPENAI_API_KEY: test-openai-key
          REPLICATE_API_TOKEN: test-replicate-token
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_SERVICE_ROLE_KEY: test-service-key

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security audit
        run: |
          cd client && npm audit --audit-level=high || true
          cd ../server && npm audit --audit-level=high || true
          
      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'replay'
          path: '.'
          format: 'SARIF'
          
      - name: Upload security results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/dependency-check-report.sarif

  performance-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd client && npm ci
          cd ../server && npm ci
          
      - name: Build client
        working-directory: ./client
        run: npm run build
        
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: [test, integration-tests, security-scan]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify team on failure
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#dev-team'
          text: 'Test suite failed on main branch'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}